// Define color mapping for Slack notifications
def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

// Define the pipeline
pipeline {
    agent any // Run the pipeline on any available agent

    tools { // Define tools required for the pipeline
        maven "MAVEN" // Use Maven
        jdk "JDK11" // Use JDK 11
    }

    stages { // Define stages of the pipeline
        stage('Fetch code') { // Fetch code from the Git repository
            steps {
                git branch: 'vp-rem', url:'https://github.com/devopshydclub/vprofile-repo.git'
            }  
        }

        stage('Build') { // Build the project
            steps {
                sh 'mvn clean install -DskipTests' // Build project, skipping tests
            }
            post { // Execute post-build actions
                success { // Execute if the stage is successful
                    echo "Now Archiving." // Print message
                    archiveArtifacts artifacts: '**/*.war' // Archive built artifacts
                }
            }
        }

        stage('Test'){ // Run Maven tests
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis'){ // Perform Checkstyle analysis
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') { // Perform SonarQube analysis
            environment { // Define environment variables specific to this stage
                scannerHome = tool 'sonar4.7' // Define the SonarQube scanner tool
            }
            steps {
               withSonarQubeEnv('sonar') { // Use SonarQube environment
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") { // Wait for SonarQube Quality Gate
            steps {
                timeout(time: 1, unit: 'HOURS') { // Set a timeout for waiting
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("UploadArtifact"){ // Upload artifact to Nexus repository
            steps{
                nexusArtifactUploader( // Use Nexus Artifact Uploader plugin
                  nexusVersion: 'nexus3', // Specify Nexus version
                  protocol: 'http', // Specify protocol
                  nexusUrl: '172.31.19.239:8081', // Specify Nexus URL
                  groupId: 'QA', // Specify Group ID
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}", // Specify version
                  repository: 'vprofile-project', // Specify repository
                  credentialsId: 'nexuslogin', // Specify credentials ID
                  artifacts: [ // Specify artifacts to upload
                    [artifactId: 'vproapp', // Specify artifact ID
                     classifier: '', // Specify classifier
                     file: 'target/vprofile-v2.war', // Specify file
                     type: 'war'] // Specify type
                  ]
                )
            }
        }
    }

    post { // Define post-build actions
        always { // Execute always, regardless of build result
            echo 'Slack Notifications.' // Print notification message
            slackSend channel: '#jenkinscicd', // Send notification to Slack channel
                color: COLOR_MAP[currentBuild.currentResult], // Set color of notification based on build result
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}" // Build notification message
        }
    }
}
